//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputAction/Game/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Bar"",
            ""id"": ""ebbc3a08-491d-4ec2-9111-5c89693533d3"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""8a2683c4-9c39-44de-aa6a-47840d2fd4a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shop"",
                    ""type"": ""Button"",
                    ""id"": ""9a2f86fc-31a4-4610-a436-349477c28c04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skills"",
                    ""type"": ""Button"",
                    ""id"": ""d99d8a7d-5600-4c88-8062-c4a861c475e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quests"",
                    ""type"": ""Button"",
                    ""id"": ""9ee41d1f-07c4-443f-8cb9-13a79598a7d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fight"",
                    ""type"": ""Button"",
                    ""id"": ""33f0c233-db48-4009-a5f9-09fa6078fcbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e0f55384-8935-4505-b28e-d26314942a4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5476f71d-92df-45a5-b46d-f6aafd19e435"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3df5ceee-5392-4e7d-ad32-1d00a6376444"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86c3895e-bb60-4571-8f52-7b4b654ca87c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skills"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e42dca1-436a-424a-97b2-adb47177045b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quests"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""547726bf-3206-4239-80d8-8dfd650d5095"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1248bbfb-e8d3-4e50-9a90-e48e08013fc8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bar
        m_Bar = asset.FindActionMap("Bar", throwIfNotFound: true);
        m_Bar_Inventory = m_Bar.FindAction("Inventory", throwIfNotFound: true);
        m_Bar_Shop = m_Bar.FindAction("Shop", throwIfNotFound: true);
        m_Bar_Skills = m_Bar.FindAction("Skills", throwIfNotFound: true);
        m_Bar_Quests = m_Bar.FindAction("Quests", throwIfNotFound: true);
        m_Bar_Fight = m_Bar.FindAction("Fight", throwIfNotFound: true);
        m_Bar_Menu = m_Bar.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bar
    private readonly InputActionMap m_Bar;
    private IBarActions m_BarActionsCallbackInterface;
    private readonly InputAction m_Bar_Inventory;
    private readonly InputAction m_Bar_Shop;
    private readonly InputAction m_Bar_Skills;
    private readonly InputAction m_Bar_Quests;
    private readonly InputAction m_Bar_Fight;
    private readonly InputAction m_Bar_Menu;
    public struct BarActions
    {
        private @GameInputActions m_Wrapper;
        public BarActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_Bar_Inventory;
        public InputAction @Shop => m_Wrapper.m_Bar_Shop;
        public InputAction @Skills => m_Wrapper.m_Bar_Skills;
        public InputAction @Quests => m_Wrapper.m_Bar_Quests;
        public InputAction @Fight => m_Wrapper.m_Bar_Fight;
        public InputAction @Menu => m_Wrapper.m_Bar_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Bar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BarActions set) { return set.Get(); }
        public void SetCallbacks(IBarActions instance)
        {
            if (m_Wrapper.m_BarActionsCallbackInterface != null)
            {
                @Inventory.started -= m_Wrapper.m_BarActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_BarActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_BarActionsCallbackInterface.OnInventory;
                @Shop.started -= m_Wrapper.m_BarActionsCallbackInterface.OnShop;
                @Shop.performed -= m_Wrapper.m_BarActionsCallbackInterface.OnShop;
                @Shop.canceled -= m_Wrapper.m_BarActionsCallbackInterface.OnShop;
                @Skills.started -= m_Wrapper.m_BarActionsCallbackInterface.OnSkills;
                @Skills.performed -= m_Wrapper.m_BarActionsCallbackInterface.OnSkills;
                @Skills.canceled -= m_Wrapper.m_BarActionsCallbackInterface.OnSkills;
                @Quests.started -= m_Wrapper.m_BarActionsCallbackInterface.OnQuests;
                @Quests.performed -= m_Wrapper.m_BarActionsCallbackInterface.OnQuests;
                @Quests.canceled -= m_Wrapper.m_BarActionsCallbackInterface.OnQuests;
                @Fight.started -= m_Wrapper.m_BarActionsCallbackInterface.OnFight;
                @Fight.performed -= m_Wrapper.m_BarActionsCallbackInterface.OnFight;
                @Fight.canceled -= m_Wrapper.m_BarActionsCallbackInterface.OnFight;
                @Menu.started -= m_Wrapper.m_BarActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_BarActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_BarActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_BarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Shop.started += instance.OnShop;
                @Shop.performed += instance.OnShop;
                @Shop.canceled += instance.OnShop;
                @Skills.started += instance.OnSkills;
                @Skills.performed += instance.OnSkills;
                @Skills.canceled += instance.OnSkills;
                @Quests.started += instance.OnQuests;
                @Quests.performed += instance.OnQuests;
                @Quests.canceled += instance.OnQuests;
                @Fight.started += instance.OnFight;
                @Fight.performed += instance.OnFight;
                @Fight.canceled += instance.OnFight;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public BarActions @Bar => new BarActions(this);
    public interface IBarActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnShop(InputAction.CallbackContext context);
        void OnSkills(InputAction.CallbackContext context);
        void OnQuests(InputAction.CallbackContext context);
        void OnFight(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
